<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHead2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//sets base variables
bodyLength = 7;
direction = 0;
speed = 4;

//creates array for instance IDs of individual body parts
for (var i = 0; i &lt; 160; i++) {
    bodyParts[i] = 0;
    }

//creates a "catch" variable for user-called events
catch = instance_id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Conditionals below check if a corresponding keyboard directional is pressed.
 * Also checks if the snake is aligned to the coordinate grid, maintaining
 * pixel-perfect grid-based motion.
 * 
 * Directions: 0 is right, counterclockwise up to 359. 0 = right, 90 = up, 180 = left, 270 = down.
 */

if (keyboard_check(vk_left) &amp;&amp; place_snapped(32,32)) {
    speed = 4;
    direction = 180;
    //Runs the loop as long as there are less body fragments than body length. If not, creates a body part and stores its instance ID in array bodyParts.
    while (instance_number(objBodyFragment2) &lt; bodyLength) {
        collect = instance_create(x,y,objBodyFragment2);
        if (bodyParts[instance_number(objBodyFragment2) - 1] == 0) {
            bodyParts[instance_number(objBodyFragment2) - 1] = collect;
            }
        }
    //For all body parts with IDs stored in the array bodyParts, instructs the body part objects to follow each other.
    //If the first body part in the array, the part is told to follow the snake's head.
    //(destination_x and destination_y are variables local to the snake's body parts.)
    for (var i = 0; i &lt; bodyLength; i++) {
        if (i &gt; 0) {
            with (bodyParts[i]) {
                if (!detached) {
                    destination_x = objSnake2.bodyParts[i-1].x;
                    destination_y = objSnake2.bodyParts[i-1].y;
                    }
                }
            }
        else {
            with (bodyParts[i]) {
                if (!detached) {
                    destination_x = objSnake2.x;
                    destination_y = objSnake2.y;
                    }
                }
            }
        }
    }
else if (keyboard_check(vk_right) &amp;&amp; place_snapped(32,32)) {
    speed = 4;
    direction = 0;
    while (instance_number(objBodyFragment2) &lt; bodyLength) {
        collect = instance_create(x,y,objBodyFragment2);
        if (bodyParts[instance_number(objBodyFragment2) - 1] == 0) {
            bodyParts[instance_number(objBodyFragment2) - 1] = collect;
            }
        }
    for (var i = 0; i &lt; bodyLength; i++) {
        if (i &gt; 0) {
            with (bodyParts[i]) {
                destination_x = objSnake2.bodyParts[i-1].x;
                destination_y = objSnake2.bodyParts[i-1].y;
                }
            }
        else {
            with (bodyParts[i]) {
                destination_x = objSnake2.x;
                destination_y = objSnake2.y;
                }
            }
        }
    }
else if (keyboard_check(vk_up) &amp;&amp; place_snapped(32,32)) {
    speed = 4;
    direction = 90;
    while (instance_number(objBodyFragment2) &lt; bodyLength) {
        collect = instance_create(x,y,objBodyFragment2);
        if (bodyParts[instance_number(objBodyFragment2) - 1] == 0) {
            bodyParts[instance_number(objBodyFragment2) - 1] = collect;
            }
        }
    for (var i = 0; i &lt; bodyLength; i++) {
        if (i &gt; 0) {
            with (bodyParts[i]) {
                destination_x = objSnake2.bodyParts[i-1].x;
                destination_y = objSnake2.bodyParts[i-1].y;
                }
            }
        else {
            with (bodyParts[i]) {
                destination_x = objSnake2.x;
                destination_y = objSnake2.y;
                }
            }
        }
    }
else if (keyboard_check(vk_down) &amp;&amp; place_snapped(32,32)) {
    speed = 4;
    direction = 270;
    while (instance_number(objBodyFragment2) &lt; bodyLength) {
        collect = instance_create(x,y,objBodyFragment2);
        if (bodyParts[instance_number(objBodyFragment2) - 1] == 0) {
            bodyParts[instance_number(objBodyFragment2) - 1] = collect;
            }
        }
    for (var i = 0; i &lt; bodyLength; i++) {
        if (i &gt; 0) {
            with (bodyParts[i]) {
                destination_x = objSnake2.bodyParts[i-1].x;
                destination_y = objSnake2.bodyParts[i-1].y;
                }
            }
        else {
            with (bodyParts[i]) {
                destination_x = objSnake2.x;
                destination_y = objSnake2.y;
                }
            }
        }
    }
//If no key is pressed, stop moving. Checks for grid placement as well.
else if (place_snapped(32,32)) {
    speed = 0;
    }
    
//Rotates the head to face the direction the snake is moving.
image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Extends the snake's body, creating another slot for instance IDs.
bodyLength += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This event is triggered when a body part is destroyed. User Event 0
//should be called from the body part's "Destroyed" trigger.

//Cycles through the bodyParts array, looking for the position of the
//destroyed body part. Breaks the loop when a match returns.
//Stores the position of the instance in variable j.

var j = 0;
for(var k = 1; k &lt; bodyLength; k++) {
    if (catch == bodyParts[k]) {
        j = k;
        break;
        }
    }
//Detaches the remaining body parts in the array from the snake.
for (var loop = j; loop &lt; bodyLength; loop++) {
    bodyParts[loop].detached = true;
    bodyParts[loop] = 0;
    }

//Adjusts the body length of the snake.
bodyLength -= (bodyLength - j);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_text(4,4,string(fps));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
